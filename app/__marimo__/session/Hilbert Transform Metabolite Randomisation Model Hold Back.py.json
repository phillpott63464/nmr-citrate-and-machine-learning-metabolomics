{
  "version": "1",
  "metadata": {
    "marimo_version": "0.14.17"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "78e30ff2e891ef32ef3bf26ff5ec4033",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "2ba8eba3f69c81f41b634b45751cc97e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h1 id=\"nmr-spectral-analysis-with-hilbert-transform\">NMR Spectral Analysis with Hilbert Transform</h1>\n<h2 id=\"hardware-configuration\">Hardware Configuration</h2>\n<span class=\"paragraph\">This notebook performs NMR spectral analysis using machine learning models with optional Hilbert transform preprocessing.</span>\n<span class=\"paragraph\"><strong>GPU Setup Information:</strong></span>\n<ul>\n<li><strong>HIP Version:</strong> 6.3.42134-a9a80e791</li>\n<li><strong>CUDA Built:</strong> True</li>\n<li><strong>GPU Device Count:</strong> 1</li>\n</ul>\n<span class=\"paragraph\">The system will automatically use GPU acceleration if available, falling back to CPU processing otherwise.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "259356def43f01133522b31436586194",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "{'Citric acid': ['SP:3368', [[np.float64(2.54257), np.float64(2.74257)], [np.float64(2.42218), np.float64(2.62218)], [np.float64(2.42218), np.float64(2.62218)], [np.float64(2.54257), np.float64(2.74257)]]], 'Succinic acid': ['SP:3211', [[np.float64(2.46115), np.float64(2.66115)], [np.float64(2.46115), np.float64(2.66115)], [np.float64(2.46115), np.float64(2.66115)], [np.float64(2.46115), np.float64(2.66115)]]], 'Maleic acid': ['SP:3110', [[np.float64(5.8943), np.float64(6.0943)], [np.float64(5.8943), np.float64(6.0943)]]], 'Lactic acid': ['SP:3675', [[np.float64(1.21779), np.float64(1.41779)], [np.float64(1.21779), np.float64(1.41779)], [np.float64(1.21779), np.float64(1.41779)], [np.float64(4.000970000000001), np.float64(4.20097)]]], 'L-Methionine': ['SP:3509', [[np.float64(2.0218), np.float64(2.2218)], [np.float64(2.0218), np.float64(2.2218)], [np.float64(2.0218), np.float64(2.2218)], [np.float64(2.09264), np.float64(2.29264)], [np.float64(2.02419), np.float64(2.22419)], [np.float64(3.74484), np.float64(3.94484)], [np.float64(3.75473), np.float64(3.95473)], [np.float64(2.52943), np.float64(2.7294300000000002)]]], 'L-Proline': ['SP:3406', [[np.float64(1.90976), np.float64(2.10976)], [np.float64(1.88336), np.float64(2.08336)], [np.float64(1.9589699999999999), np.float64(2.15897)], [np.float64(2.2381599999999997), np.float64(2.43816)], [np.float64(4.01895), np.float64(4.2189499999999995)], [np.float64(3.2237899999999997), np.float64(3.42379)], [np.float64(3.30658), np.float64(3.50658)]]], 'L-Phenylalanine': ['SP:3507', [[np.float64(7.263310000000001), np.float64(7.46331)], [np.float64(7.313070000000001), np.float64(7.51307)], [np.float64(7.313070000000001), np.float64(7.51307)], [np.float64(7.21495), np.float64(7.414949999999999)], [np.float64(7.21495), np.float64(7.414949999999999)], [np.float64(3.01747), np.float64(3.21747)], [np.float64(3.16952), np.float64(3.36952)], [np.float64(3.8780099999999997), np.float64(4.07801)]]], 'L-Serine': ['SP:3732', [[np.float64(3.87321), np.float64(4.0732099999999996)], [np.float64(3.83583), np.float64(4.03583)], [np.float64(3.73226), np.float64(3.9322600000000003)]]], 'L-Threonine': ['SP:3437', [[np.float64(1.2181899999999999), np.float64(1.41819)], [np.float64(1.2181899999999999), np.float64(1.41819)], [np.float64(1.2181899999999999), np.float64(1.41819)], [np.float64(4.14186), np.float64(4.34186)], [np.float64(3.4731), np.float64(3.6731000000000003)]]], 'L-Tryptophan': ['SP:3455', [[np.float64(7.1725200000000005), np.float64(7.37252)], [np.float64(7.0900300000000005), np.float64(7.29003)], [np.float64(7.42821), np.float64(7.628209999999999)], [np.float64(7.620620000000001), np.float64(7.82062)], [np.float64(7.203550000000001), np.float64(7.40355)], [np.float64(3.19379), np.float64(3.39379)], [np.float64(3.3698699999999997), np.float64(3.56987)], [np.float64(3.9354999999999998), np.float64(4.1354999999999995)]]], 'L-Tyrosine': ['SP:3464', [[np.float64(6.89574), np.float64(7.095739999999999)], [np.float64(6.49396), np.float64(6.69396)], [np.float64(6.49326), np.float64(6.6932599999999995)], [np.float64(6.89296), np.float64(7.09296)], [np.float64(2.5903), np.float64(2.7903000000000002)], [np.float64(2.75406), np.float64(2.95406)], [np.float64(3.31919), np.float64(3.51919)]]], 'L-Valine': ['SP:3490', [[np.float64(0.93301), np.float64(1.13301)], [np.float64(0.93301), np.float64(1.13301)], [np.float64(0.93301), np.float64(1.13301)], [np.float64(0.8798400000000001), np.float64(1.0798400000000001)], [np.float64(0.8798400000000001), np.float64(1.0798400000000001)], [np.float64(0.8798400000000001), np.float64(1.0798400000000001)], [np.float64(2.16632), np.float64(2.36632)], [np.float64(3.49926), np.float64(3.69926)]]], 'Glycine': ['SP:3682', [[np.float64(3.4444), np.float64(3.6444)], [np.float64(3.4444), np.float64(3.6444)]]]}\n"
        }
      ]
    },
    {
      "id": "bkHC",
      "code_hash": "6b1f2c6929641b503fa402b15277600d",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"experimental-configuration\">Experimental Configuration</h2>\n<span class=\"paragraph\"><strong>Metabolite Panel:</strong></span>\n<span class=\"paragraph\">This analysis uses 13 metabolites commonly found in biological samples:</span>\n<ul>\n<li><strong>Citric acid:</strong> SP:3368</li>\n<li><strong>Succinic acid:</strong> SP:3211</li>\n<li><strong>Maleic acid:</strong> SP:3110</li>\n<li><strong>Lactic acid:</strong> SP:3675</li>\n<li><strong>L-Methionine:</strong> SP:3509</li>\n<li><strong>L-Proline:</strong> SP:3406</li>\n<li><strong>L-Phenylalanine:</strong> SP:3507</li>\n<li><strong>L-Serine:</strong> SP:3732</li>\n<li><strong>L-Threonine:</strong> SP:3437</li>\n<li><strong>L-Tryptophan:</strong> SP:3455</li>\n<li><strong>L-Tyrosine:</strong> SP:3464</li>\n<li><strong>L-Valine:</strong> SP:3490</li>\n<li><strong>Glycine:</strong> SP:3682</li>\n</ul>\n<span class=\"paragraph\"><strong>Data Generation Strategy:</strong></span>\n<ul>\n<li><strong>Hold-back validation:</strong> Two metabolites are randomly selected and excluded from training</li>\n<li><strong>Mixture complexity:</strong> Combinations range from 4 to 13 metabolites</li>\n<li><strong>Concentration variability:</strong> Random scaling applied to simulate biological variation</li>\n<li><strong>Reference standard:</strong> TSP (trimethylsilyl propanoic acid) used for normalization</li>\n</ul>\n<span class=\"paragraph\">This approach tests the model's ability to detect and quantify metabolites it has never seen during training.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "lEQa",
      "code_hash": "4a4385ff475a8781867832b4d81b1904",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "PKri",
      "code_hash": "d4354b160704b38b52c9863648714541",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "3f65c8417b5f73e6ddc8cd66a568a46e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "SFPL",
      "code_hash": "48a22c28e8dba92eedfeebe7459c32ca",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "b74f7de03d6e1602a801c57807aebeb2",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Found existing dataset at ./data_cache/randomisation_hold_back/raw_data/f61b809ea546ea70aaa54651132e00fba7cb0a429a6d2c80774e0c0e565d4a39.h5\nLoaded dataset metadata - 100 spectra from 10 combinations\nHeld-back metabolites: ['L-Phenylalanine', 'Succinic acid']\nDataset ready with 100 spectra\nHeld-back metabolites: ['L-Phenylalanine', 'Succinic acid']\nDataset file: ./data_cache/randomisation_hold_back/raw_data/f61b809ea546ea70aaa54651132e00fba7cb0a429a6d2c80774e0c0e565d4a39.h5\n"
        }
      ]
    },
    {
      "id": "RGSE",
      "code_hash": "d511775d4e1088059b2a5074ccca729e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Created streaming dataset with 100 spectra\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "[ 0.00033653 -0.00018035  0.00118941 ... -0.00018502 -0.00042655\n  0.00080194]\n"
        }
      ]
    },
    {
      "id": "Kclp",
      "code_hash": "19686ab4f0c52935de3f97969f46afd0",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "unsupported operand type(s) for +: 'slice' and 'int'",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">139</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">last_expr</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_Kclp_.py&quot;</span>, line <span class=\"m\">20</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Sample </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">spectrum</span><span class=\"p\">[</span><span class=\"s1\">&#39;scales&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">spectra</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">])])}</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_RGSE_.py&quot;</span>, line <span class=\"m\">21</span>, in <span class=\"n\">__getitem__</span>\n<span class=\"w\">    </span><span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">get_spectrum_batch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_SFPL_.py&quot;</span>, line <span class=\"m\">46</span>, in <span class=\"n\">get_spectrum_batch</span>\n<span class=\"w\">    </span><span class=\"n\">end_idx</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">start_idx</span> <span class=\"o\">+</span> <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;intensities&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gr\">TypeError</span>: <span class=\"n\">unsupported operand type(s) for +: &#39;slice&#39; and &#39;int&#39;</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "emfo",
      "code_hash": "83d6609db8ca94e24102a8ad690e6023",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "x and y must have same first dimension, but have shapes (32768,) and (1,)",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Total spectra available: 100\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">138</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_emfo_.py&quot;</span>, line <span class=\"m\">12</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/matplotlib/pyplot.py&quot;</span>, line <span class=\"m\">3838</span>, in <span class=\"n\">plot</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/matplotlib/axes/_axes.py&quot;</span>, line <span class=\"m\">1777</span>, in <span class=\"n\">plot</span>\n<span class=\"w\">    </span><span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_lines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)]</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/matplotlib/axes/_base.py&quot;</span>, line <span class=\"m\">297</span>, in <span class=\"n\">__call__</span>\n<span class=\"w\">    </span><span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_plot_args</span><span class=\"p\">(</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/matplotlib/axes/_base.py&quot;</span>, line <span class=\"m\">494</span>, in <span class=\"n\">_plot_args</span>\n<span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;x and y must have same first dimension, but &quot;</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">x and y must have same first dimension, but have shapes (32768,) and (1,)</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "Hstk",
      "code_hash": "db32b376433ab153595cfdc403107e0d",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyError): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "nWHF",
      "code_hash": "081e5d1101d3af0cfde60c48b12daec8",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Generated reference spectra for metabolite identification:\n  SP:3368: 32768 data points\n  SP:3211: 32768 data points\n  SP:3110: 32768 data points\n  SP:3675: 32768 data points\n  SP:3509: 32768 data points\n  SP:3406: 32768 data points\n  SP:3507: 32768 data points\n  SP:3732: 32768 data points\n  SP:3437: 32768 data points\n  SP:3455: 32768 data points\n  SP:3464: 32768 data points\n  SP:3490: 32768 data points\n  SP:3682: 32768 data points\n0    1.0\nName: SP:3368, dtype: float64\n"
        }
      ]
    },
    {
      "id": "iLit",
      "code_hash": "6b3b6cab1756c35f3093181faf4f6477",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyError): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "ZHCJ",
      "code_hash": "6b2528bf9ecfb6837fbaa03a7ffd24fb",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyError): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "ROlb",
      "code_hash": "60c13043d8b51e7399eb0936f0d1eb42",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "qnkX",
      "code_hash": "0383d9ed42cdfff354fa33ddd40b3c7e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "TqIu",
      "code_hash": "9df7f0858fab315cb44c780bcd340da5",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "Vxnm",
      "code_hash": "0f43b8c9c2e3deb20d818f4e16c7391a",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Preprocessing training spectra...\nUsing 11 processes for spectra preprocessing\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "/opt/conda/envs/ml/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "/opt/conda/envs/ml/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n/opt/conda/envs/ml/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "/opt/conda/envs/ml/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "/opt/conda/envs/ml/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">138</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_Vxnm_.py&quot;</span>, line <span class=\"m\">5</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">preprocessed_spectra</span> <span class=\"o\">=</span> <span class=\"n\">process_spectra_parallel</span><span class=\"p\">(</span><span class=\"n\">spectra</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_1748/__marimo__cell_TqIu_.py&quot;</span>, line <span class=\"m\">69</span>, in <span class=\"n\">process_spectra_parallel</span>\n<span class=\"w\">    </span><span class=\"n\">preprocessed_spectra</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">process_single_spectrum</span><span class=\"p\">,</span> <span class=\"n\">spectra</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/multiprocessing/pool.py&quot;</span>, line <span class=\"m\">367</span>, in <span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_async</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">mapstar</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/multiprocessing/pool.py&quot;</span>, line <span class=\"m\">768</span>, in <span class=\"n\">get</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/multiprocessing/pool.py&quot;</span>, line <span class=\"m\">765</span>, in <span class=\"n\">wait</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_event</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/threading.py&quot;</span>, line <span class=\"m\">607</span>, in <span class=\"n\">wait</span>\n<span class=\"w\">    </span><span class=\"n\">signaled</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cond</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/threading.py&quot;</span>, line <span class=\"m\">320</span>, in <span class=\"n\">wait</span>\n<span class=\"w\">    </span><span class=\"n\">waiter</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span>\n  File <span class=\"nb\">&quot;/opt/conda/envs/ml/lib/python3.10/site-packages/marimo/_runtime/handlers.py&quot;</span>, line <span class=\"m\">32</span>, in <span class=\"n\">interrupt_handler</span>\n<span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"n\">MarimoInterrupt</span>\n<span class=\"gr\">KeyboardInterrupt</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "DnEU",
      "code_hash": "d37abe74bd9fc7afd24034ec88f91e8e",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "ulZA",
      "code_hash": "a6f3b3f7aa4dcbc9b6280bad285a0005",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "ecfG",
      "code_hash": "8eb7c8cb4b4cd274262998b1c9d2b40c",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "Pvdt",
      "code_hash": "698cc831c76a0cef9c26b33a4a601c76",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "ZBYS",
      "code_hash": "572bd633286d4c830a7173c1e23f5985",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "aLJB",
      "code_hash": "514d0a1d330629f432f4203de713c958",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "nHfw",
      "code_hash": "bf25ccacff747c739150abdf33310c2e",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "xXTn",
      "code_hash": "ebe77c1d4de8fa9bf5c50d21d61961d9",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "AjVT",
      "code_hash": "fb44aab46ccec817766978bad0f459cb",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "pHFh",
      "code_hash": "dd243942f6309ab3ec5a38996a29d066",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "NCOB",
      "code_hash": "6c4eaa6e3ad3f3cef504ee6113d6520d",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "aqbW",
      "code_hash": "e0246f51a154a7953dc41e8fb47e6232",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "TRpd",
      "code_hash": "81323ef750de2129578632538497f58e",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "TXez",
      "code_hash": "e97b0d03e28adba946937b179dee625d",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "dNNg",
      "code_hash": "a40931dfb02144cd4c76cb2e45b83cf4",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "yCnT",
      "code_hash": "6c8ed63337999637cf728bba365ee098",
      "outputs": [
        {
          "type": "error",
          "ename": "interruption",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "wlCL",
      "code_hash": "5a6bd47971e9a5c15698bb07486b5c8c",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "kqZH",
      "code_hash": "30c1478362e02339d5f371e36d845cb1",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "wAgl",
      "code_hash": "f5ed5d5cc2c5aef7511f9ee1b632c961",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "An ancestor raised an exception (KeyboardInterrupt): ",
          "traceback": []
        }
      ],
      "console": []
    }
  ]
}